# Jeffley GarÃ§on 2311100023 & Loude Djema Sime 2211100051
.data
prompt_menu: .asciz "Menu Principal:\n1. Configuracao\n2. Jogar\n3. Sair\nEscolha: "
prompt_config:  .asciz "\nMenu de Configuracao:\n1. Quantidade de jogadores\n2. Tamanho do tabuleiro\n3. Modo de dificuldade\n4. Zerar contadores\n5. Mostrar configuracoes\n6. Voltar ao Menu Principal\nEscolha: "
opcao_invalida: .asciz "Opcao invalida, tente novamente.\n"
qtd_jogadores_msg: .asciz "Quantidade de jogadores (1 ou 2): "
msg_de_um_jogador: .asciz " 1 Jogador \n--------------------------------\n"
msg_de_dois_jogador: .asciz " 2 Jogadores \n--------------------------------\n"
tamanho_tabuleiro_msg: .asciz "Tamanho do tabuleiro\n1. para 7x6 \n2 para 9x6 \n"
msg_7x6_escolhido: .asciz "Tabuleiro 7x6 escolhido.\n--------------------------------\n"
msg_9x6_escolhido: .asciz "Tabuleiro 9x6 escolhido.\n--------------------------------\n"
modo_dificuldade_msg: .asciz "Modo de dificuldade (1 - Facil, 2 - Medio): \n1. Facil\n2. Medio\n--------------------------------\n"
msg_modo_facil: .asciz "Modo Facil escolhido.\n--------------------------------\n"
msg_modo_medio: .asciz "Modo Medio escolhido.\n--------------------------------\n"
contadores_zerados_msg: .asciz "Contadores zerados.\n--------------------------------\n"
mostrar_config_msg: .asciz "Configuracao atual.\n"
config_jogadores_msg: .asciz "\nQuantidade de jogadores: "
config_tamanho_tabuleiro_msg: .asciz "\nTamanho do tabuleiro: "
config_modo_dificuldade_msg: .asciz "\nModo de dificuldade: "
config_contadores_msg: .asciz "\nContadores:\nTotal jogadas: "
config_vitorias_msg: .asciz "\nVitorias: "
config_derrotas_msg: .asciz "\nDerrotas: "
msg_jogo_iniciado: .asciz "Iniciando o jogo...\n"
msg_tabuleiro_inicializado: .asciz "Tabuleiro inicializado com sucesso.\n"
msg_selecione_coluna: .asciz "Selecione uma coluna (0 a 5): "
msg_jogador1: .asciz "Jogador 1 (X), selecione sua jogada.\n"
msg_jogador2: .asciz "Jogador 2 (O), selecione sua jogada.\n"
msg_jogada_invalida: .asciz "Jogada invalida, tente novamente.\n"
msg_vitoria_jogador1: .asciz "Jogador 1 (X) venceu!\n"
msg_vitoria_jogador2: .asciz "Jogador 2 (O) venceu!\n"
msg_empate: .asciz "Empate!\n"
msg_coluna_invalida: .asciz "Coluna invalida, tente novamente.\n"
newline: .asciz "\n" 
contador_total_jogadas: .word 0 
contador_vitorias: .word 0
contador_derrotas: .word 0 
dash_tabuleiro: .asciz " "

# Usando .space para alocar o tabuleiro
tabuleiro: 
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
tabuleiro_9x6: 
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0, 0, 0

col_header: .asciz "0 1 2 3 4 5 6\n"
col_header_9x6: .asciz "0 1 2 3 4 5 6 7 8\n"

.text
.globl main
main:

    # Imprime o menu principal
    li a7, 4                       
    la a0, prompt_menu             
    ecall

    # Pega a entrada do usuário
    li a7, 5                       
    ecall                         
    mv t0, a0                     

    # Verifica a escolha
    li t1, 1                       
    beq t0, t1, configuracao       

    li t1, 2                       
    beq t0, t1, jogar              

    li t1, 3                      
    beq t0, t1, sair               

    # Caso a entrada seja inválida
    li a7, 4                       
    la a0, opcao_invalida          
    ecall                          
    j main                         

configuracao:
    # Imprime o menu de configuração
    li a7, 4                       
    la a0, prompt_config           
    ecall

    # Pega a entrada do usuário
    li a7, 5                       
    ecall
    mv t1, a0

    # Verifica a opção selecionada
    li t2, 1                      
    beq t1, t2, qtd_jogadores

    li t2, 2                      
    beq t1, t2, tamanho_tabuleiro

    li t2, 3                       
    beq t1, t2, modo_dificuldade

    li t2, 4                      
    beq t1, t2, zerar_contadores

    li t2, 5                       
    beq t1, t2, mostrar_configuracoes
    
    li t2, 6
    beq t1, t2, main

    # Se inválido, reinicia o menu de configuração
    j configuracao                 

qtd_jogadores:
    li a7, 4
    la a0, qtd_jogadores_msg
    ecall                         

    li a7, 5                     
    ecall                         

    # Verifica a entrada de quantidade de jogadores
    li t1, 1                    
    li t2, 2                    
    beq a0, t1, um_jogador       
    beq a0, t2, dois_jogadores    

    # Caso seja inválido
    li a7, 4
    la a0, opcao_invalida        
    ecall
    j qtd_jogadores             

um_jogador:
    li s0, 1                       
    li a7, 4                       
    la a0, msg_de_um_jogador      
    ecall
    j configuracao

dois_jogadores:
    li s0, 2 
    li a7, 4                       
    la a0, msg_de_dois_jogador
    ecall
    j configuracao

tamanho_tabuleiro:
    li a7, 4
    la a0, tamanho_tabuleiro_msg
    ecall 

    li a7, 5 
    ecall
    mv t1, a0

    # Verifica a escolha de tamanho do tabuleiro
    li t2, 1 
    beq t1, t2, tabuleiro_7x6

    li t2, 2 
    beq t1, t2, tabuleiro_9x6_

    li a7, 4
    la a0, opcao_invalida
    ecall
    j tamanho_tabuleiro

tabuleiro_7x6:
    li s1, 1 
    li a7, 4
    la a0, msg_7x6_escolhido
    ecall

    # Inicializa o tabuleiro
    jal inicializa_tabuleiro_7x6
    j configuracao
    
tabuleiro_9x6_:
    li s1, 2 
    li a7, 4
    la a0, msg_9x6_escolhido
    ecall

    # Inicializa o tabuleiro
    jal inicializa_tabuleiro_9x6
    j configuracao

modo_dificuldade:
    li a7, 4
    la a0, modo_dificuldade_msg
    ecall

    li a7, 5
    ecall
    mv t1, a0

    li t2, 1
    beq t1, t2, modo_facil

    li t2, 2 
    beq t1, t2, modo_medio

    li a7, 4
    la a0, opcao_invalida
    ecall
    j modo_dificuldade

modo_facil:
    li s2, 1 
    li a7, 4
    la a0, msg_modo_facil
    ecall
    j configuracao

modo_medio:
    li s2, 2 
    li a7, 4
    la a0, msg_modo_medio
    ecall
    j configuracao

zerar_contadores:
    li a0, 0
    la t0, contador_total_jogadas
    sw a0, 0(t0) 

    la t0, contador_vitorias
    sw a0, 0(t0)

    la t0, contador_derrotas
    sw a0, 0(t0)

    li a7, 4
    la a0, contadores_zerados_msg  
    ecall
    j configuracao

mostrar_configuracoes:
    li a7, 4
    la a0, mostrar_config_msg      
    ecall

    li a7, 4
    la a0, config_jogadores_msg    
    ecall
    li a7, 1
    mv a0, s0
    ecall

    li a7, 4
    la a0, config_tamanho_tabuleiro_msg
    ecall
    li a7, 1
    mv a0, s1
    ecall

    li a7, 4
    la a0, config_modo_dificuldade_msg
    ecall
    li a7, 1
    mv a0, s2
    ecall

    li a7, 4
    la a0, config_contadores_msg
    ecall

    li a7, 1
    la t0, contador_total_jogadas
    lw a0, 0(t0)
    ecall

    li a7, 4
    la a0, config_vitorias_msg
    ecall
    li a7, 1
    la t0, contador_vitorias
    lw a0, 0(t0) 
    ecall

    li a7, 4
    la a0, config_derrotas_msg
    ecall
    li a7, 1
    la t0, contador_derrotas
    lw a0, 0(t0) 
    ecall

    j configuracao

# Funções de Inicialização do Tabuleiro

inicializa_tabuleiro_7x6:
    la t2, tabuleiro          # Carrega o endereço base do tabuleiro
    li t0, 6                  # Número de linhas (6)
    li t1, 7                  # Número de colunas (7)
inicializa_loop:
    beq t0, x0, inicializa_fim
    li t3, 7                  # Reinicia o contador de colunas para cada linha
inicializa_coluna:
    beq t3, x0, inicializa_proxima_linha
    sw zero, 0(t2)            # Define o valor da célula como 0
    addi t2, t2, 4            # Avança 4 bytes (palavra)
    addi t3, t3, -1           # Decrementa o número de colunas
    j inicializa_coluna        # Continua para a próxima coluna
inicializa_proxima_linha:
    addi t0, t0, -1           # Decrementa o número de linhas
    j inicializa_loop          # Continua para a próxima linha
inicializa_fim:
    jr ra
    
# Inicialização do tabuleiro 9x6 (seguindo a mesma lógica do 7x6)
inicializa_tabuleiro_9x6:
    la t2, tabuleiro_9x6
    li t0, 6            # Número de linhas (6)
    li t1, 9            # Número de colunas (9)
inicializa_loop_9x6:
    beq t0, x0, inicializa_fim_9x6
    li t3, 9            # Reinicia o contador de colunas para cada linha
inicializa_coluna_9x6:
    beq t3, x0, inicializa_proxima_linha_9x6
    sw zero, 0(t2)      # Define o valor da célula como 0
    addi t2, t2, 4      # Avança 4 bytes (alinhamento de memória)
    addi t3, t3, -1     # Decrementa o número de colunas
    j inicializa_coluna_9x6
inicializa_proxima_linha_9x6:
    addi t0, t0, -1     # Decrementa o número de linhas
    j inicializa_loop_9x6
inicializa_fim_9x6:
    jr ra

# Funções de Exibição do Tabuleiro

exibir_tabuleiro:
    li a7, 4
    la a0, col_header        # Exibe o cabeçalho com os números das colunas
    ecall  
    la t2, tabuleiro         # Carrega o endereço base do tabuleiro
    li t0, 6                 # Número de linhas (6) do tabuleiro 7x6
exibir_linha:
    beq t0, x0, exibir_fim   # Verifica se todas as linhas foram exibidas
    li t1, 7                 # Número de colunas (7) para o tabuleiro 7x6
exibir_coluna:
    beq t1, x0, exibir_proxima_linha   # Verifica se todas as colunas foram exibidas
    lw t3, 0(t2)            # Carrega o valor da célula do tabuleiro

    # Exibe o valor da célula diretamente (0 ou outro valor)
    li a7, 1                # Código do ecall para imprimir inteiros
    mv a0, t3               # Move o valor da célula para ser impresso
    ecall

    # Espaço após o valor da célula
    li a7, 4
    la a0, dash_tabuleiro             # Exibe um espaço ou separador
    ecall

    addi t2, t2, 4           # Avança 4 bytes (para a próxima célula)
    addi t1, t1, -1          # Decrementa o número de colunas
    j exibir_coluna          # Continua exibindo as próximas colunas

exibir_proxima_linha:
    li a7, 4
    la a0, newline           # Nova linha após cada linha de células
    ecall
    addi t0, t0, -1          # Decrementa o número de linhas
    j exibir_linha           # Continua para a próxima linha

exibir_fim:
    jr ra                    # Retorna ao chamador

exibir_tabuleiro_9x6:
    li a7, 4
    la a0, col_header_9x6     # Exibe o cabeçalho para o tabuleiro 9x6
    ecall
    la t2, tabuleiro_9x6      # Carrega o endereço base do tabuleiro 9x6
    li t0, 6                  # Número de linhas (6)
exibir_linha_9x6:
    beq t0, x0, exibir_fim_9x6  
    li t1, 9                    # Número de colunas (9)
exibir_coluna_9x6:
    beq t1, x0, exibir_proxima_linha_9x6
    lw a0, 0(t2)              # Carrega o valor da célula do tabuleiro
    li a7, 1                  # Exibe o valor (0 ou outros)
    ecall

    # Espaço após o valor da célula
    li a7, 4
    la a0, dash_tabuleiro             # Exibe um espaço ou separador
    ecall

    addi t2, t2, 4
    addi t1, t1, -1
    j exibir_coluna_9x6

exibir_proxima_linha_9x6:
    li a7, 4
    la a0, newline
    ecall
    addi t0, t0, -1
    j exibir_linha_9x6
exibir_fim_9x6:
    jr ra

# Funções para Jogar
jogar:
    li a7, 4
    la a0, msg_jogo_iniciado
    ecall

    # Verifica qual tabuleiro foi selecionado
    li t1, 1
    beq s1, t1, jogar_tabuleiro_7x6

    li t1, 2
    beq s1, t1, jogar_tabuleiro_9x6

    # Se houver algum erro, volta ao menu
    j main

jogar_tabuleiro_7x6:
    jal exibir_tabuleiro  # Exibe o tabuleiro 7x6
    li s3, 0              # Começa com o Jogador 1 (0 = Jogador 1, 1 = Jogador 2)
    j loop_jogo            # Vai para a lógica de jogadas

jogar_tabuleiro_9x6:
    jal exibir_tabuleiro_9x6  # Exibe o tabuleiro 9x6
    li s3, 0                  # Começa com o Jogador 1 (0 = Jogador 1, 1 = Jogador 2)
    j loop_jogo            # Vai para a lógica de jogadas

loop_jogo:
    beq s3, x0, jogador1_turno
    li t3, 1
    beq s3, t3, jogador2_turno
    j loop_jogo    

    # Verifica de quem é a vez
    beq s3, x0, jogador1_turno
    li t3, 1
    beq s3, t3, jogador2_turno
    j loop_jogo


jogador1_turno:
    li a7, 4
    la a0, msg_jogador1
    ecall

    li a7, 5  # Pega a entrada do jogador 1
    ecall
    mv t0, a0  # Armazena a jogada do jogador 1

    # Verifica se a jogada é válida
    jal verificar_jogada
    beq t1, x0, jogada_invalida

    # Atualiza o tabuleiro com a jogada do jogador 1
    jal atualizar_tabuleiro_jogador1

    # Verifica se o jogador 1 venceu
    jal verificar_vitoria
    li t4, 1
    beq t0, t4, jogador1_venceu


    li s3, 1  # Muda para o jogador 2
    j loop_jogo

# Turno do Jogador 2
jogador2_turno:
    li a7, 4
    la a0, msg_jogador2
    ecall

    li a7, 5  # Pega a entrada do jogador 2
    ecall
    mv t0, a0  # Armazena a jogada do jogador 2

    # Verifica se a jogada é válida
    jal verificar_jogada
    beq t1, x0, jogada_invalida

    # Atualiza o tabuleiro com a jogada do jogador 2
    jal atualizar_tabuleiro_jogador2


    jal verificar_vitoria
    li t4, 1
    beq t0, t4, jogador2_venceu


    li s3, 0  
    j loop_jogo


jogada_invalida:
    li a7, 4
    la a0, msg_jogada_invalida
    ecall
    j loop_jogo
jogador1_venceu:
    li a7, 4
    la a0, msg_vitoria_jogador1
    ecall
    j main

jogador2_venceu:
    li a7, 4
    la a0, msg_vitoria_jogador2
    ecall
    j main

# Verificação da jogada
verificar_jogada:
    li t1, 1  
    jr ra

atualizar_tabuleiro_jogador1:
    la t2, tabuleiro
    mv t5, t0
    li t1, 6

procura_linha_livre_jogador1:
    li t4, 7
    mul t3, t1, t4
    add t3, t3, t5
    slli t3, t3, 2
    add t6, t2, t3
    lw t4, 0(t6)

    beq t4, x0, encontrou_linha_livre_jogador1
    addi t1, t1, -1
    bnez t1, procura_linha_livre_jogador1
    j fim_atualizar_jogador1

encontrou_linha_livre_jogador1:
    li t4, 1  # Marca o jogador 1 com "1" no tabuleiro
    sw t4, 0(t6)

fim_atualizar_jogador1:
    jr ra

# Atualização do tabuleiro para Jogador 2
atualizar_tabuleiro_jogador2:
    la t2, tabuleiro
    mv t5, t0
    li t1, 6

procura_linha_livre_jogador2:
    li t4, 7
    mul t3, t1, t4
    add t3, t3, t5
    slli t3, t3, 2
    add t6, t2, t3
    lw t4, 0(t6)

    beq t4, x0, encontrou_linha_livre_jogador2
    addi t1, t1, -1
    bnez t1, procura_linha_livre_jogador2
    j fim_atualizar_jogador2

encontrou_linha_livre_jogador2:
    li t4, 2  # Marca o jogador 2 com "2" no tabuleiro
    sw t4, 0(t6)

fim_atualizar_jogador2:
    jr ra
verificar_vitoria:
    li t0, 0
    jr ra

# Sair do programa
sair:
    li a7, 10
    ecall
