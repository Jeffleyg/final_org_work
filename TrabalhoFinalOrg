# Jeffley GArçon 2311100023 & Loude Djema Sime 2211100051
.data
prompt_menu: .asciz "Menu Principal:\n1. Configuracao\n2. Jogar\n3. Sair\nEscolha: "
prompt_config:  .asciz "\nMenu de Configuracao:\n1. Quantidade de jogadores\n2. Tamanho do tabuleiro\n3. Modo de dificuldade\n4. Zerar contadores\n5. Mostrar configuracoes\n6. Voltar ao Menu Principal\nEscolha: "
opcao_invalida: .asciz "Opcao invalida, tente novamente.\n"
qtd_jogadores_msg: .asciz "Quantidade de jogadores (1 ou 2): "
msg_de_um_jogador: .asciz " 1 Jogador \n--------------------------------\n"
msg_de_dois_jogador: .asciz " 2 Jogadores \n--------------------------------\n"
tamanho_tabuleiro_msg: .asciz "Tamanho do tabuleiro\n1. para 7x6 \n, \n2 para 9x6 \n "
msg_7x6_escolhido: .asciz "Tabuleiro 7x6 escolhido.\n--------------------------------\n"
msg_9x6_escolhido: .asciz "Tabuleiro 9x6 escolhido.\n --------------------------------\n"
modo_dificuldade_msg: .asciz "Modo de dificuldade (1 - Facil, 2 - Medio): \n.1. Facil\n2. Medio\n--------------------------------\n"
msg_modo_facil: .asciz "Modo Facil escolhido.\n--------------------------------\n"
msg_modo_medio: .asciz "Modo Medio escolhido.\n--------------------------------\n"
contadores_zerados_msg: .asciz "Contadores zerados.\n--------------------------------\n"
mostrar_config_msg: .asciz "Configuracao atual.\n"
config_jogadores_msg: .asciz "\nQuantidade de jogadores: "
config_tamanho_tabuleiro_msg: .asciz "\nTamanho do tabuleiro: "
config_modo_dificuldade_msg: .asciz "\nModo de dificuldade: "
config_contadores_msg: .asciz "\nContadores:\nTotal jogadas: "
config_vitorias_msg: .asciz "\nVitorias: "
config_derrotas_msg: .asciz "\nDerrotas: "
msg_jogo_iniciado: .asciz "Iniciando o jogo...\n"
msg_tabuleiro_inicializado: .asciz "Tabuleiro inicializado com sucesso.\n"
msg_selecione_coluna: .asciz "Selecione uma coluna (0 a 5): "
msg_jogador1: .asciz "Jogador 1 (X), selecione sua jogada.\n"
msg_jogador2: .asciz "Jogador 2 (O), selecione sua jogada.\n"
msg_jogada_invalida: .asciz "Jogada invalida, tente novamente.\n"
msg_vitoria_jogador1: .asciz "Jogador 1 (X) venceu!\n"
msg_vitoria_jogador2: .asciz "Jogador 2 (O) venceu!\n"
msg_empate: .asciz "Empate!\n"
msg_coluna_invalida: .asciz "Coluna inv�lida, tente novamente.\n"
newline: .asciz "\n" 
contador_total_jogadas: .word 0 
contador_vitorias: .word 0
contador_derrotas: .word 0 

tabuleiro: 
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    
col_header: .asciz "0 1 2 3 4 5 6\n"

.text
.globl main
main:

    li a7, 4                       
    la a0, prompt_menu             
    ecall                          


    li a7, 5                       
    ecall                        
    mv t0, a0                    


    li t1, 1                       
    beq t0, t1, configuracao       

    li t1, 2                       
    beq t0, t1, jogar              

    li t1, 3                     
    beq t0, t1, sair               


    li a7, 4                       
    la a0, opcao_invalida          
    ecall                          
    j main                         

configuracao:
    li a7, 4                       
    la a0, prompt_config           
    ecall

    li a7, 5                       
    ecall
    mv t1, a0


    li t2, 1                      
    beq t1, t2, qtd_jogadores

    li t2, 2                      
    beq t1, t2, tamanho_tabuleiro

    li t2, 3                       
    beq t1, t2, modo_dificuldade

    li t2, 4                      
    beq t1, t2, zerar_contadores

    li t2, 5                       
    beq t1, t2, mostrar_configuracoes
    
    li t2, 6
    beq t1, t2, main

    j configuracao                 

qtd_jogadores:
    li a7, 4
    la a0, qtd_jogadores_msg
    ecall                         

    li a7, 5                     
    ecall                         

    li t3, 10                      
    beq a0, t3, qtd_jogadores      

    li t1, 1                    
    li t2, 2                    
    beq a0, t1, um_jogador        
    beq a0, t2, dois_jogadores    

    li a7, 4
    la a0, opcao_invalida        
    ecall
    j qtd_jogadores             
um_jogador:
    li s0, 1                       
    li a7, 4                       
    la a0, msg_de_um_jogador      
    ecall
    j configuracao

dois_jogadores:
    li s0, 2 
    li a7, 4                       
    la a0, msg_de_dois_jogador
    ecall
    j configuracao



tamanho_tabuleiro:
    li a7, 4
    la a0, tamanho_tabuleiro_msg
    ecall 

    li a7, 5 
    ecall
    mv t1, a0

    li t2, 1 
    beq t1, t2, tabuleiro_7x6

    li t2, 2 
    beq t1, t2, tabuleiro_9x6

    li a7, 4
    la a0, opcao_invalida
    ecall
    j tamanho_tabuleiro

tabuleiro_7x6:
    li s1, 1 
    li a7, 4
    la a0, msg_7x6_escolhido
    ecall
    j configuracao

tabuleiro_9x6:
    li s1, 2 
    li a7, 4
    la a0, msg_9x6_escolhido
    ecall
    j configuracao
    
modo_dificuldade:
    li a7, 4
    la a0, modo_dificuldade_msg
    ecall

    li a7, 5
    ecall
    mv t1, a0

    li t2, 1
    beq t1, t2, modo_facil

    li t2, 2 
    beq t1, t2, modo_medio

    li a7, 4
    la a0, opcao_invalida
    ecall
    j modo_dificuldade

modo_facil:
    li s2, 1 
    li a7, 4
    la a0, msg_modo_facil
    ecall
    j configuracao

modo_medio:
    li s2, 2 
    li a7, 4
    la a0, msg_modo_medio
    ecall
    j configuracao

zerar_contadores:
    li a0, 0
    la t0, contador_total_jogadas
    sw a0, 0(t0) 

    la t0, contador_vitorias
    sw a0, 0(t0)

    la t0, contador_derrotas
    sw a0, 0(t0)


    li a7, 4
    la a0, contadores_zerados_msg  
    ecall
    j configuracao

mostrar_configuracoes:

    li a7, 4
    la a0, mostrar_config_msg      
    ecall

    li a7, 4
    la a0, config_jogadores_msg    
    ecall
    li a7, 1
    mv a0, s0
    ecall

    li a7, 4
    la a0, config_tamanho_tabuleiro_msg
    ecall
    li a7, 1
    mv a0, s1
    ecall

    li a7, 4
    la a0, config_modo_dificuldade_msg
    ecall
    li a7, 1
    mv a0, s2
    ecall

    li a7, 4
    la a0, config_contadores_msg
    ecall

    li a7, 1
    la t0, contador_total_jogadas
    lw a0, 0(t0)
    ecall

    li a7, 4
    la a0, config_vitorias_msg
    ecall
    li a7, 1
    la t0, contador_vitorias
    lw a0, 0(t0) 
    ecall

    li a7, 4
    la a0, config_derrotas_msg
    ecall
    li a7, 1
    la t0, contador_derrotas
    lw a0, 0(t0) 
    ecall

    j configuracao


# Fun��o de "Jogar" principal
jogar:
    jal inicializa_tabuleiro       # Inicializa o tabuleiro vazio
    li s3, 0                       # Inicializa o turno (0 para jogador 1, 1 para jogador 2)

loop_jogo:
    jal imprime_tabuleiro          # Imprime o tabuleiro

    # Alterna entre os jogadores
    beqz s3, turno_jogador1        # Se turno == 0, � o Jogador 1
    jal turno_jogador2             # Se turno == 1, � o Jogador 2

    # Verifica se algu�m venceu ou se houve empate
    jal verifica_vencedor

    # Continua o loop do jogo
    j loop_jogo
    
verifica_vencedor:
    # Implementa��o de verifica��o de vit�ria pode ser feita aqui
    # Por enquanto, apenas retorna sem fazer nada
    jr ra                           # Retorna da fun��o
    
turno_jogador1:
    li a7, 4
    la a0, msg_jogador1
    ecall

    jal selecionar_coluna          # Jogador 1 seleciona a coluna
    mv t2, a0                      # Salva a coluna selecionada em t2

    jal insere_peca                # Insere a pe�a 'X' no tabuleiro
    li s3, 1                       # Troca o turno para o Jogador 2
    jr ra                          # Retorna para o loop do jogo

turno_jogador2:
    li a7, 4
    la a0, msg_jogador2
    ecall

    jal selecionar_coluna          # Jogador 2 seleciona a coluna
    mv t2, a0                      # Salva a coluna selecionada em t2

    jal insere_peca                # Insere a pe�a 'O' no tabuleiro
    li s3, 0                       # Troca o turno para o Jogador 1
    jr ra                          # Retorna para o loop do jogo

# Fun��o para selecionar a coluna
selecionar_coluna:
    li a7, 4
    la a0, msg_selecione_coluna     # Exibe a mensagem "Selecione uma coluna"
    ecall

    li a7, 5                        # Chamada de sistema para ler a entrada
    ecall                           # L� o valor digitado (esperando de 0 a 5)

    # Se o n�mero estiver entre '0' (48) e '5' (53), converte o valor de ASCII para n�mero
    li t1, 0                       # ASCII '0'
    li t2, 5                       # ASCII '5'
    blt a0, t1, coluna_invalida      # Verifica se o n�mero � menor que '0'
    bgt a0, t2, coluna_invalida      # Verifica se o n�mero � maior que '5'

    # Converte de ASCII para n�mero
    addi a0, a0, -1                # Subtrai 48 para converter de ASCII para n�mero (0 a 5)

    mv t2, a0
    # Se tudo estiver correto, retorna
    jr ra

coluna_invalida:
    li a7, 4
    la a0, msg_coluna_invalida      # Exibe mensagem de coluna inv�lida
    ecall
    j selecionar_coluna             # Tenta novamente

# Fun��o para inserir a pe�a no tabuleiro
insere_peca:
    li t3, 6                        # N�mero de linhas (6)
    la t4, tabuleiro                # Endere�o base do tabuleiro
    mul t5, t2, t3                  # Calcula a posi��o da coluna escolhida (coluna * n�mero de linhas)
    add t4, t4, t5                  # Move para a coluna apropriada

    li t6, 0                        # Loop para encontrar a pr�xima linha vazia
loop_insere:
    lw t6, 0(t4)                    # Carrega o valor da c�lula
    beqz t6, coloca_peca            # Se a c�lula estiver vazia (0), insere a pe�a
    addi t4, t4, 4                  # Avan�a para a pr�xima linha (de baixo para cima)
    addi t6, t6, 1                  # Incrementa o contador de linha
    blt t6, t3, loop_insere         # Continua o loop at� o final da coluna
    j coluna_cheia                  # Caso a coluna esteja cheia, pula para tratar

coloca_peca:
    # Insere a pe�a dependendo de quem est� jogando
    beqz s3, jogador1_peca          # Jogador 1 insere 'X'
    li t6, 2                        # Jogador 2 insere 'O' (2)
    sw t6, 0(t4)                    # Armazena a pe�a 'O'
    jr ra                           # Retorna
jogador1_peca:
    li t6, 1                        # Jogador 1 insere 'X' (1)
    sw t6, 0(t4)                    # Armazena a pe�a 'X'
    jr ra                           # Retorna

coluna_cheia:
    li a7, 4
    la a0, msg_coluna_invalida      # Exibe mensagem de "coluna cheia, tente novamente"
    ecall
    j selecionar_coluna             # Volta para o jogador selecionar outra coluna

# Fun��o para verificar se h� uma vit�ria
verifica_vitoria:
    # Aqui voc� deve implementar a l�gica para verificar linhas, colunas e diagonais
    # Se um jogador ganhar, exibir a mensagem de vit�ria e retornar ao menu principal
    jr ra                           # Retorna
    
# Fun��o para inicializar o tabuleiro
inicializa_tabuleiro:
    la t2, tabuleiro        # Endere�o base do tabuleiro
    li t0, 6                # N�mero de linhas (6)
    li t1, 9                # N�mero de colunas (9)
    
    
# Fun��o para imprimir o tabuleiro
imprime_tabuleiro:
    # Imprime o cabe�alho das colunas
    li a7, 4                    # Chamada de sistema para imprimir string
    la a0, col_header           # Carregar o cabe�alho "0 1 2 3 4 5 6"
    ecall

    la t0, tabuleiro            # Carrega o endere�o base do tabuleiro
    li t1, 6                    # N�mero de linhas
    li t2, 7                    # N�mero de colunas
    
imprime_linhas:
    li t3, 0                    # Contador de colunas dentro da linha

imprime_colunas:
    lw t4, 0(t0)                # Carrega o valor da c�lula atual do tabuleiro (word)
    li t5, 0                    # Verifica se � zero

    # Se for zero, imprime "-"
    beq t4, t5, imprime_vazio   

    # Se n�o for zero, verifica o valor da pe�a
    li t5, 1                    # Se for 1, imprime "#"
    beq t4, t5, imprime_jogador1

    li t5, 2                    # Se for 2, imprime "&"
    beq t4, t5, imprime_jogador2

imprime_vazio:
    li a7, 4                    # Chamada de sistema para imprimir string
    la a0, dash                 # Imprimir "-"
    ecall
    j proxima_celula

imprime_jogador1:
    li a7, 4                    # Chamada de sistema para imprimir string
    la a0, jogador1_peca        # Imprimir "#"
    ecall
    j proxima_celula

imprime_jogador2:
    li a7, 4                    # Chamada de sistema para imprimir string
    la a0, jogador2_peca        # Imprimir "&"
    ecall

proxima_celula:
    addi t0, t0, 4              # Move para a pr�xima c�lula (word)
    addi t3, t3, 1              # Incrementa o contador de colunas
    blt t3, t2, imprime_colunas # Continua imprimindo as colunas

    # Imprime uma nova linha ap�s cada linha do tabuleiro
    li a7, 4
    la a0, newline        # Exibe uma nova linha
    ecall

    addi t1, t1, -1             # Decrementa o contador de linhas
    bgtz t1, imprime_linhas     # Continua at� o final do tabuleiro
    jr ra                       # Retorna da fun��o


    
sair:
    li a7, 10                    
    ecall

.data
dash: .asciz "- "
jogador1_peca: .asciz "#"
jogador2_peca: .asciz "& "
