.data
prompt_menu: .asciz "Menu Principal:\n1. Configuracao\n2. Jogar\n3. Sair\nEscolha: "
prompt_config:  .asciz "\nMenu de Configuracao:\n1. Quantidade de jogadores\n2. Tamanho do tabuleiro\n3. Modo de dificuldade\n4. Zerar contadores\n5. Mostrar configuracoes\n6. Voltar ao Menu Principal\nEscolha: "
opcao_invalida: .asciz "Opcao invalida, tente novamente.\n"
qtd_jogadores_msg: .asciz "Quantidade de jogadores (1 ou 2): "
msg_de_um_jogador: .asciz " 1 Jogador \n--------------------------------\n"
msg_de_dois_jogador: .asciz " 2 Jogadores \n--------------------------------\n"
tamanho_tabuleiro_msg: .asciz "Tamanho do tabuleiro\n1. para 7x6 \n, \n2 para 9x6 \n "
msg_7x6_escolhido: .asciz "Tabuleiro 7x6 escolhido.\n--------------------------------\n"
msg_9x6_escolhido: .asciz "Tabuleiro 9x6 escolhido.\n --------------------------------\n"
modo_dificuldade_msg: .asciz "Modo de dificuldade (1 - Facil, 2 - Medio): \n.1. Facil\n2. Medio\n--------------------------------\n"
msg_modo_facil: .asciz "Modo Facil escolhido.\n--------------------------------\n"
msg_modo_medio: .asciz "Modo Medio escolhido.\n--------------------------------\n"
contadores_zerados_msg: .asciz "Contadores zerados.\n--------------------------------\n"
mostrar_config_msg: .asciz "Configuracao atual.\n"
config_jogadores_msg: .asciz "\nQuantidade de jogadores: "
config_tamanho_tabuleiro_msg: .asciz "\nTamanho do tabuleiro: "
config_modo_dificuldade_msg: .asciz "\nModo de dificuldade: "
config_contadores_msg: .asciz "\nContadores:\nTotal jogadas: "
config_vitorias_msg: .asciz "\nVitorias: "
config_derrotas_msg: .asciz "\nDerrotas: "
msg_jogo_iniciado: .asciz "Iniciando o jogo...\n"
msg_tabuleiro_inicializado: .asciz "Tabuleiro inicializado com sucesso.\n"
msg_selecione_coluna: .asciz "Selecione uma coluna (0 a 5): "
msg_jogador1: .asciz "Jogador 1 (X), selecione sua jogada.\n"
msg_jogador2: .asciz "Jogador 2 (O), selecione sua jogada.\n"
msg_jogada_invalida: .asciz "Jogada invalida, tente novamente.\n"
msg_vitoria_jogador1: .asciz "Jogador 1 (X) venceu!\n"
msg_vitoria_jogador2: .asciz "Jogador 2 (O) venceu!\n"
msg_empate: .asciz "Empate!\n"
msg_coluna_invalida: .asciz "Coluna inválida, tente novamente.\n"
newline: .asciz "\n"               
contador_total_jogadas: .word 0   
contador_vitorias: .word 0         
contador_derrotas: .word 0         

tabuleiro:         .space 216

.text
.globl main
main:


    li a7, 4                       
    la a0, prompt_menu             
    ecall                          


    li a7, 5                       
    ecall                        
    mv t0, a0                    


    li t1, 1                       
    beq t0, t1, configuracao       

    li t1, 2                       
    beq t0, t1, jogar              

    li t1, 3                     
    beq t0, t1, sair               


    li a7, 4                       
    la a0, opcao_invalida          
    ecall                          
    j main                         

configuracao:
    li a7, 4                       
    la a0, prompt_config           
    ecall

    li a7, 5                       
    ecall
    mv t1, a0


    li t2, 1                      
    beq t1, t2, qtd_jogadores

    li t2, 2                      
    beq t1, t2, tamanho_tabuleiro

    li t2, 3                       
    beq t1, t2, modo_dificuldade

    li t2, 4                      
    beq t1, t2, zerar_contadores

    li t2, 5                       
    beq t1, t2, mostrar_configuracoes
    
    li t2, 6
    beq t1, t2, main

    j configuracao                 

qtd_jogadores:
    li a7, 4
    la a0, qtd_jogadores_msg      
    ecall                         

    li a7, 5                     
    ecall                         

    li t3, 10                      
    beq a0, t3, qtd_jogadores      

    li t1, 1                    
    li t2, 2                    
    beq a0, t1, um_jogador        
    beq a0, t2, dois_jogadores    

    li a7, 4
    la a0, opcao_invalida        
    ecall
    j qtd_jogadores             
um_jogador:
    li s0, 1                       
    li a7, 4                       
    la a0, msg_de_um_jogador      
    ecall
    j configuracao                 # Volta para o menu de configuração

dois_jogadores:
    li s0, 2                       # Armazena a quantidade de jogadores
    li a7, 4                       
    la a0, msg_de_dois_jogador      # Exibe a mensagem "Dois jogadores escolhidos"
    ecall
    j configuracao                 # Volta para o menu de configuração



tamanho_tabuleiro:
    li a7, 4
    la a0, tamanho_tabuleiro_msg   # Carrega a mensagem "Tamanho do tabuleiro (1 para 7x6, 2 para 9x6)"
    ecall                          # Exibe a mensagem

    li a7, 5                       # Lê a escolha do tamanho do tabuleiro
    ecall
    mv t1, a0                      # Armazena a escolha em t1

    li t2, 1                       # Se o valor for 1 (ASCII '1')
    beq t1, t2, tabuleiro_7x6

    li t2, 2                       # Se o valor for 2 (ASCII '2')
    beq t1, t2, tabuleiro_9x6

    li a7, 4
    la a0, opcao_invalida          # Exibe "Opção inválida"
    ecall
    j tamanho_tabuleiro            # Volta para pedir a entrada novamente

tabuleiro_7x6:
    li s1, 1                       # Armazena a escolha de tabuleiro 7x6
    li a7, 4
    la a0, msg_7x6_escolhido       # Exibe a mensagem "Tabuleiro 7x6 escolhido"
    ecall
    j configuracao                 # Volta para o menu de configuração

tabuleiro_9x6:
    li s1, 2                       # Armazena a escolha de tabuleiro 9x6
    li a7, 4
    la a0, msg_9x6_escolhido       # Exibe a mensagem "Tabuleiro 9x6 escolhido"
    ecall
    j configuracao                 # Volta para o menu de configuração
    
modo_dificuldade:
    li a7, 4
    la a0, modo_dificuldade_msg    # Exibe a mensagem "Modo de dificuldade (1 - Facil, 2 - Medio)"
    ecall

    li a7, 5                       # Lê a escolha do modo de dificuldade
    ecall
    mv t1, a0                      # Armazena a escolha em t1

    li t2, 1                       # Se o valor for 1 (ASCII '1')
    beq t1, t2, modo_facil

    li t2, 2                       # Se o valor for 2 (ASCII '2')
    beq t1, t2, modo_medio

    li a7, 4
    la a0, opcao_invalida          # Exibe "Opção inválida"
    ecall
    j modo_dificuldade             # Volta para pedir a entrada novamente

modo_facil:
    li s2, 1                       # Armazena a escolha de modo fácil
    li a7, 4
    la a0, msg_modo_facil          # Exibe a mensagem "Modo Facil escolhido"
    ecall
    j configuracao                 # Volta para o menu de configuração

modo_medio:
    li s2, 2                       # Armazena a escolha de modo médio
    li a7, 4
    la a0, msg_modo_medio          # Exibe a mensagem "Modo Medio escolhido"
    ecall
    j configuracao                 # Volta para o menu de configuração

zerar_contadores:
    # Zera os contadores
    li a0, 0
    la t0, contador_total_jogadas   # Carrega o endereço do contador_total_jogadas
    sw a0, 0(t0)                   # Armazena 0 no contador_total_jogadas

    la t0, contador_vitorias        # Carrega o endereço do contador_vitorias
    sw a0, 0(t0)                   # Armazena 0 no contador_vitorias

    la t0, contador_derrotas        # Carrega o endereço do contador_derrotas
    sw a0, 0(t0)                   # Armazena 0 no contador_derrotas


    li a7, 4
    la a0, contadores_zerados_msg  
    ecall
    j configuracao                 # Retorna ao menu de configuração

mostrar_configuracoes:
    # Exibe a mensagem inicial de configuração atual
    li a7, 4
    la a0, mostrar_config_msg      
    ecall

    # Exibe a quantidade de jogadores
    li a7, 4
    la a0, config_jogadores_msg    
    ecall
    li a7, 1                       # Chamada de sistema para imprimir inteiro
    mv a0, s0                      # Carrega a quantidade de jogadores
    ecall

    # Exibe o tamanho do tabuleiro
    li a7, 4
    la a0, config_tamanho_tabuleiro_msg
    ecall
    li a7, 1                       # Chamada de sistema para imprimir inteiro
    mv a0, s1                      # Carrega o valor do tamanho do tabuleiro
    ecall

    # Exibe o modo de dificuldade
    li a7, 4
    la a0, config_modo_dificuldade_msg
    ecall
    li a7, 1                       # Chamada de sistema para imprimir inteiro
    mv a0, s2                      # Carrega o valor do modo de dificuldade
    ecall

    # Exibe os contadores
    li a7, 4
    la a0, config_contadores_msg
    ecall

    # Exibe o contador de total de jogadas
    li a7, 1
    la t0, contador_total_jogadas   # Carrega o endereço do contador de total jogadas
    lw a0, 0(t0)                   # Carrega o valor do contador
    ecall

    # Exibe o contador de vitórias
    li a7, 4
    la a0, config_vitorias_msg
    ecall
    li a7, 1
    la t0, contador_vitorias        # Carrega o endereço do contador de vitórias
    lw a0, 0(t0)                   # Carrega o valor do contador
    ecall

    # Exibe o contador de derrotas
    li a7, 4
    la a0, config_derrotas_msg
    ecall
    li a7, 1
    la t0, contador_derrotas        # Carrega o endereço do contador de derrotas
    lw a0, 0(t0)                   # Carrega o valor do contador
    ecall

    # Retorna ao menu de configuração
    j configuracao
# Função para inicializar o tabuleiro
inicializa_tabuleiro:
    la t2, tabuleiro        # Endereço base do tabuleiro
    li t0, 6                # Número de linhas (6)
    li t1, 9                # Número de colunas (9)
    
loop_linhas:
    li t3, 0                # Inicializa a coluna
loop_colunas:
    sb zero, 0(t2)          # Define a célula como vazia (valor 0)
    addi t2, t2, 1          # Avança para a próxima célula
    addi t3, t3, 1          # Incrementa a coluna atual
    blt t3, t1, loop_colunas # Continua até o final da linha
    addi t0, t0, -1         # Decrementa o número de linhas
    bgtz t0, loop_linhas    # Continua até o final do tabuleiro
    li a7, 4
    la a0, msg_tabuleiro_inicializado # Exibe mensagem de sucesso
    ecall
    jr ra                   # Retorna da função

# Função para imprimir o tabuleiro
imprime_tabuleiro:
    la t0, tabuleiro        # Carrega o endereço base do tabuleiro
    li t1, 6                # Número de linhas (6)
    li t2, 9                # Número de colunas (9)

loop_linhas_imprime:
    li t3, 0                # Inicializa o contador de colunas
loop_colunas_imprime:
    lb a0, 0(t0)            # Carrega o valor da célula
    addi a0, a0, 48         # Converte o valor para caractere ASCII ('0', '1', '2')
    li a7, 4                # Syscall para imprimir caractere
    ecall                   # Imprime o valor da célula
    addi t0, t0, 1          # Avança para a próxima célula
    addi t3, t3, 1          # Incrementa o contador de colunas
    blt t3, t2, loop_colunas_imprime # Continua até o final da linha

    # Imprime uma nova linha após o término de cada linha
    li a7, 4
    la a0, newline          # Carrega o caractere de nova linha
    ecall                   # Imprime a nova linha

    addi t1, t1, -1         # Decrementa o contador de linhas
    bgtz t1, loop_linhas_imprime # Continua até o final do tabuleiro
    jr ra                   # Retorna da função

# Função de "Jogar" principal
jogar:            

    jal inicializa_tabuleiro       # Inicializa o tabuleiro vazio
    li s3, 0                       # Inicializa o turno (0 para jogador 1, 1 para jogador 2)

loop_jogo:
    jal imprime_tabuleiro          # Imprime o tabuleiro

    # Alterna entre os jogadores
    beqz s3, turno_jogador1        # Se turno == 0, é o Jogador 1
    jal turno_jogador2             # Se turno == 1, é o Jogador 2
    j verifica_vitoria             # Verifica se houve vitória

# Turno do Jogador 1 (X)
turno_jogador1:
    li a7, 4
    la a0, msg_jogador1            # Exibe a mensagem "Jogador 1, selecione sua jogada"
    ecall

    jal selecionar_coluna          # Jogador 1 seleciona a coluna
    mv t2, a0                      # Salva a coluna selecionada em t2

    jal insere_peca                # Insere a peça 'X' no tabuleiro
    li s3, 1                       # Troca o turno para o Jogador 2
    j loop_jogo                    # Continua o jogo

# Turno do Jogador 2 (O)
turno_jogador2:
    li a7, 4
    la a0, msg_jogador2            # Exibe a mensagem "Jogador 2, selecione sua jogada"
    ecall

    jal selecionar_coluna          # Jogador 2 seleciona a coluna
    mv t2, a0                      # Salva a coluna selecionada em t2

    jal insere_peca                # Insere a peça 'O' no tabuleiro
    li s3, 0                       # Troca o turno para o Jogador 1
    j loop_jogo                    # Continua o jogo

# Função para inserir a peça no tabuleiro
insere_peca:
    li t3, 6                        # Número de linhas (6)
    la t4, tabuleiro                # Endereço base do tabuleiro
    mul t5, t2, t3                  # Calcula a posição da coluna escolhida (coluna * número de linhas)
    add t4, t4, t5                  # Move para a coluna apropriada

    li t6, 0                        # Loop para encontrar a próxima linha vazia
loop_insere:
    lb t6, 0(t4)                    # Carrega o valor da célula
    beqz t6, coloca_peca            # Se a célula estiver vazia (0), insere a peça
    addi t4, t4, 1                  # Avança para a próxima linha (de baixo para cima)
    addi t6, t6, 1                  # Incrementa o contador de linha
    blt t6, t3, loop_insere         # Continua o loop até o final da coluna
    j coluna_cheia                  # Caso a coluna esteja cheia, pula para tratar

coloca_peca:
    # Insere a peça dependendo de quem está jogando
    beqz s3, jogador1_peca          # Jogador 1 insere 'X'
    li t6, 2                        # Jogador 2 insere 'O' (2)
    sb t6, 0(t4)                    # Armazena a peça 'O'
    jr ra                           # Retorna
jogador1_peca:
    li t6, 1                        # Jogador 1 insere 'X' (1)
    sb t6, 0(t4)                    # Armazena a peça 'X'
    jr ra                           # Retorna

# Novo rótulo para tratar quando a coluna estiver cheia
coluna_cheia:
    li a7, 4
    la a0, msg_coluna_invalida      # Exibe mensagem de "coluna cheia, tente novamente"
    ecall
    j selecionar_coluna             # Volta para o jogador selecionar outra coluna


# Função para selecionar a coluna (lê a entrada do jogador)
selecionar_coluna:
    li a7, 4
    la a0, msg_selecione_coluna     # Exibe a mensagem "Selecione uma coluna"
    ecall

    li a7, 5                        # Chamada de sistema para ler a entrada
    ecall                           # Lê o valor digitado (0 a 8)
    addi a0, a0, -48                # Converte de ASCII para número
    
    li t1, 0
    blt a0, t1, coluna_invalida      # Verifica se a coluna é válida (0-8)
    li t1, 9
    bge a0, t1, coluna_invalida
    jr ra

coluna_invalida:
    li a7, 4
    la a0, msg_coluna_invalida      # Exibe mensagem de coluna inválida
    ecall
    j selecionar_coluna             # Tenta novamente


# Função para verificar se há uma vitória
verifica_vitoria:
    # Aqui você deve implementar a lógica para verificar linhas, colunas e diagonais
    # Se um jogador ganhar, exibir a mensagem de vitória e retornar ao menu principal
    jr ra                           # Retorna

sair:
    li a7, 10                    
    ecall
    




