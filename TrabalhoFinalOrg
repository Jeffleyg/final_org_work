# Jeffley GArçon 2311100023 & Loude Djema Sime 2211100051
.data
prompt_menu: .asciz "Menu Principal:\n1. Configuracao\n2. Jogar\n3. Sair\nEscolha: "
prompt_config:  .asciz "\nMenu de Configuracao:\n1. Quantidade de jogadores\n2. Tamanho do tabuleiro\n3. Modo de dificuldade\n4. Zerar contadores\n5. Mostrar configuracoes\n6. Voltar ao Menu Principal\nEscolha: "
opcao_invalida: .asciz "Opcao invalida, tente novamente.\n"
qtd_jogadores_msg: .asciz "Quantidade de jogadores (1 ou 2): "
msg_de_um_jogador: .asciz " 1 Jogador \n--------------------------------\n"
msg_de_dois_jogador: .asciz " 2 Jogadores \n--------------------------------\n"
tamanho_tabuleiro_msg: .asciz "Tamanho do tabuleiro\n1. para 7x6 \n, \n2 para 9x6 \n "
msg_7x6_escolhido: .asciz "Tabuleiro 7x6 escolhido.\n--------------------------------\n"
msg_9x6_escolhido: .asciz "Tabuleiro 9x6 escolhido.\n --------------------------------\n"
modo_dificuldade_msg: .asciz "Modo de dificuldade (1 - Facil, 2 - Medio): \n.1. Facil\n2. Medio\n--------------------------------\n"
msg_modo_facil: .asciz "Modo Facil escolhido.\n--------------------------------\n"
msg_modo_medio: .asciz "Modo Medio escolhido.\n--------------------------------\n"
contadores_zerados_msg: .asciz "Contadores zerados.\n--------------------------------\n"
mostrar_config_msg: .asciz "Configuracao atual.\n"
config_jogadores_msg: .asciz "\nQuantidade de jogadores: "
config_tamanho_tabuleiro_msg: .asciz "\nTamanho do tabuleiro: "
config_modo_dificuldade_msg: .asciz "\nModo de dificuldade: "
config_contadores_msg: .asciz "\nContadores:\nTotal jogadas: "
config_vitorias_msg: .asciz "\nVitorias: "
config_derrotas_msg: .asciz "\nDerrotas: "
msg_jogo_iniciado: .asciz "Iniciando o jogo...\n"
msg_tabuleiro_inicializado: .asciz "Tabuleiro inicializado com sucesso.\n"
msg_selecione_coluna: .asciz "Selecione uma coluna (0 a 5): "
msg_jogador1: .asciz "Jogador 1 (X), selecione sua jogada.\n"
msg_jogador2: .asciz "Jogador 2 (O), selecione sua jogada.\n"
msg_jogada_invalida: .asciz "Jogada invalida, tente novamente.\n"
msg_vitoria_jogador1: .asciz "Jogador 1 (X) venceu!\n"
msg_vitoria_jogador2: .asciz "Jogador 2 (O) venceu!\n"
msg_empate: .asciz "Empate!\n"
msg_coluna_invalida: .asciz "Coluna inv�lida, tente novamente.\n"
newline: .asciz "\n" 
contador_total_jogadas: .word 0 
contador_vitorias: .word 0
contador_derrotas: .word 0 

tabuleiro: 
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    .word 0, 0, 0, 0, 0, 0, 0
    
col_header: .asciz "0 1 2 3 4 5 6\n"

.text
.globl main
main:

    li a7, 4                       
    la a0, prompt_menu             
    ecall                          


    li a7, 5                       
    ecall                        
    mv t0, a0                    


    li t1, 1                       
    beq t0, t1, configuracao       

    li t1, 2                       
    beq t0, t1, jogar              

    li t1, 3                     
    beq t0, t1, sair               


    li a7, 4                       
    la a0, opcao_invalida          
    ecall                          
    j main                         

configuracao:
    li a7, 4                       
    la a0, prompt_config           
    ecall

    li a7, 5                       
    ecall
    mv t1, a0


    li t2, 1                      
    beq t1, t2, qtd_jogadores

    li t2, 2                      
    beq t1, t2, tamanho_tabuleiro

    li t2, 3                       
    beq t1, t2, modo_dificuldade

    li t2, 4                      
    beq t1, t2, zerar_contadores

    li t2, 5                       
    beq t1, t2, mostrar_configuracoes
    
    li t2, 6
    beq t1, t2, main

    j configuracao                 

qtd_jogadores:
    li a7, 4
    la a0, qtd_jogadores_msg
    ecall                         

    li a7, 5                     
    ecall                         

    li t3, 10                      
    beq a0, t3, qtd_jogadores      

    li t1, 1                    
    li t2, 2                    
    beq a0, t1, um_jogador        
    beq a0, t2, dois_jogadores    

    li a7, 4
    la a0, opcao_invalida        
    ecall
    j qtd_jogadores             
um_jogador:
    li s0, 1                       
    li a7, 4                       
    la a0, msg_de_um_jogador      
    ecall
    j configuracao

dois_jogadores:
    li s0, 2 
    li a7, 4                       
    la a0, msg_de_dois_jogador
    ecall
    j configuracao



tamanho_tabuleiro:
    li a7, 4
    la a0, tamanho_tabuleiro_msg
    ecall 

    li a7, 5 
    ecall
    mv t1, a0

    li t2, 1 
    beq t1, t2, tabuleiro_7x6

    li t2, 2 
    beq t1, t2, tabuleiro_9x6

    li a7, 4
    la a0, opcao_invalida
    ecall
    j tamanho_tabuleiro

tabuleiro_7x6:
    li s1, 1 
    li a7, 4
    la a0, msg_7x6_escolhido
    ecall
    j configuracao

tabuleiro_9x6:
    li s1, 2 
    li a7, 4
    la a0, msg_9x6_escolhido
    ecall
    j configuracao
    
modo_dificuldade:
    li a7, 4
    la a0, modo_dificuldade_msg
    ecall

    li a7, 5
    ecall
    mv t1, a0

    li t2, 1
    beq t1, t2, modo_facil

    li t2, 2 
    beq t1, t2, modo_medio

    li a7, 4
    la a0, opcao_invalida
    ecall
    j modo_dificuldade

modo_facil:
    li s2, 1 
    li a7, 4
    la a0, msg_modo_facil
    ecall
    j configuracao

modo_medio:
    li s2, 2 
    li a7, 4
    la a0, msg_modo_medio
    ecall
    j configuracao

zerar_contadores:
    li a0, 0
    la t0, contador_total_jogadas
    sw a0, 0(t0) 

    la t0, contador_vitorias
    sw a0, 0(t0)

    la t0, contador_derrotas
    sw a0, 0(t0)


    li a7, 4
    la a0, contadores_zerados_msg  
    ecall
    j configuracao

mostrar_configuracoes:

    li a7, 4
    la a0, mostrar_config_msg      
    ecall

    li a7, 4
    la a0, config_jogadores_msg    
    ecall
    li a7, 1
    mv a0, s0
    ecall

    li a7, 4
    la a0, config_tamanho_tabuleiro_msg
    ecall
    li a7, 1
    mv a0, s1
    ecall

    li a7, 4
    la a0, config_modo_dificuldade_msg
    ecall
    li a7, 1
    mv a0, s2
    ecall

    li a7, 4
    la a0, config_contadores_msg
    ecall

    li a7, 1
    la t0, contador_total_jogadas
    lw a0, 0(t0)
    ecall

    li a7, 4
    la a0, config_vitorias_msg
    ecall
    li a7, 1
    la t0, contador_vitorias
    lw a0, 0(t0) 
    ecall

    li a7, 4
    la a0, config_derrotas_msg
    ecall
    li a7, 1
    la t0, contador_derrotas
    lw a0, 0(t0) 
    ecall

    j configuracao


    

jogar:
    # Inicializa o tabuleiro
    jal inicializa_tabuleiro
    li s3, 0  # Jogador 1 começa

loop_jogo:
    # Exibe o tabuleiro
    jal exibir_tabuleiro

    # Verifica de quem é a vez
    beq s3, x0, jogador1_turno
    li t3, 1
    beq s3, t3, jogador2_turno

jogador1_turno:
    li a7, 4
    la a0, msg_jogador1
    ecall

    li a7, 5
    ecall
    mv t0, a0

    # Verifica se a jogada é válida
    jal verificar_jogada
    beq t1, x0, jogada_invalida

    # Atualiza o tabuleiro com a jogada do jogador 1
    jal atualizar_tabuleiro_jogador1

    # Verifica se o jogador 1 venceu
    jal verificar_vitoria
    li t4, 1
    beq t0, t4, jogador1_venceu

    # Passa a vez para o jogador 2
    li s3, 1
    j loop_jogo

jogador2_turno:
    li a7, 4
    la a0, msg_jogador2
    ecall

    li a7, 5
    ecall
    mv t0, a0

    # Verifica se a jogada é válida
    jal verificar_jogada
    beq t1, x0, jogada_invalida

    # Atualiza o tabuleiro com a jogada do jogador 2
    jal atualizar_tabuleiro_jogador2

    # Verifica se o jogador 2 venceu
    jal verificar_vitoria
    li t4, 1
    beq t0, t4, jogador2_venceu

    # Passa a vez para o jogador 1
    li s3, 0
    j loop_jogo

jogada_invalida:
    li a7, 4
    la a0, msg_jogada_invalida
    ecall
    j loop_jogo

jogador1_venceu:
    li a7, 4
    la a0, msg_vitoria_jogador1
    ecall
    j main

jogador2_venceu:
    li a7, 4
    la a0, msg_vitoria_jogador2
    ecall
    j main

inicializa_tabuleiro:
    la t2, tabuleiro
    li t0, 6
    li t1, 7
    # Inicializa todas as posições do tabuleiro com 0
    inicializa_loop:
        beq t0, x0, inicializa_fim
        li t3, 7
        inicializa_coluna:
            beq t3, x0, inicializa_proxima_linha
            sw zero, 0(t2)
            addi t2, t2, 4
            addi t3, t3, -1
            j inicializa_coluna
        inicializa_proxima_linha:
            addi t0, t0, -1
            j inicializa_loop
    inicializa_fim:
        jr ra

exibir_tabuleiro:
    # Exibe o cabeçalho das colunas
    li a7, 4
    la a0, col_header
    ecall
    
    # Exibe cada linha do tabuleiro
    la t2, tabuleiro
    li t0, 6
exibir_linha:
    beq t0, x0, exibir_fim
    li t1, 7
exibir_coluna:
    beq t1, x0, exibir_proxima_linha
    lw t3, 0(t2)   # Carrega o valor da célula do tabuleiro em t3
    
    # Verifica o valor e exibe o símbolo correspondente
    li t4, 0       # Valor 0 representa um espaço vazio "-"
    beq t3, t4, exibir_espaco_vazio
    
    li t4, 1       # Valor 1 representa o Jogador 1 ("X" ou "#")
    beq t3, t4, exibir_jogador1
    
    li t4, 2       # Valor 2 representa o Jogador 2 ("O" ou "&")
    beq t3, t4, exibir_jogador2

exibir_espaco_vazio:
    la a0, dash    # Exibe o "-"
    li a7, 4
    ecall
    j proximo_elemento

exibir_jogador1:
    la a0, jogador1_peca  # Exibe o "#"
    li a7, 4
    ecall
    j proximo_elemento

exibir_jogador2:
    la a0, jogador2_peca  # Exibe o "&"
    li a7, 4
    ecall

proximo_elemento:
    addi t2, t2, 4        # Move para a próxima célula
    addi t1, t1, -1
    j exibir_coluna

exibir_proxima_linha:
    li a7, 4
    la a0, newline        # Exibe uma nova linha
    ecall
    addi t0, t0, -1
    j exibir_linha

exibir_fim:
    jr ra

verificar_jogada:
    # Verifica se a jogada é válida (coluna dentro do limite e não cheia)
    # Implementação simplificada
    li t1, 1  # Supondo que a jogada é válida
    jr ra

atualizar_tabuleiro_jogador1:
    la t2, tabuleiro      # Carrega o endereço do tabuleiro
    mv t5, t0             # t0 contém a coluna escolhida pelo jogador 1

    li t1, 6              # Começa na linha mais baixa (linha 6)

procura_linha_livre_jogador1:
    li t4, 7
    mul t3, t1, t4        # Calcula o deslocamento para a linha atual (multiplica por 7)
    add t3, t3, t5        # Soma o deslocamento da coluna (escolhida pelo jogador)
    slli t3, t3, 2        # Multiplica por 4 para acessar o endereço da célula correta (4 bytes por célula)
    add t6, t2, t3
    lw t4, 0(t6)      # Carrega o valor da célula (0, 1 ou 2)

    beq t4, x0, encontrou_linha_livre_jogador1   # Se a célula está vazia (0), pode colocar a peça
    addi t1, t1, -1       # Move para a linha acima
    bnez t1, procura_linha_livre_jogador1   # Continua subindo até achar uma célula vazia
    j fim_atualizar_jogador1  # Se não encontrar uma célula livre, termina (o jogo deve verificar essa condição)

encontrou_linha_livre_jogador1:
    li t4, 1              # Coloca a peça do jogador 1 (1 representa o jogador 1)
    sw t4, 0(t6)      # Atualiza a célula com o valor 1

fim_atualizar_jogador1:
    jr ra                 # Retorna ao chamador

atualizar_tabuleiro_jogador2:
    la t2, tabuleiro      # Carrega o endereço do tabuleiro
    mv t5, t0             # t0 contém a coluna escolhida pelo jogador 2

    li t1, 6              # Começa na linha mais baixa (linha 6)

procura_linha_livre_jogador2:
    li t4, 7
    mul t3, t1, t4         # Calcula o deslocamento para a linha atual (multiplica por 7)
    add t3, t3, t5        # Soma o deslocamento da coluna (escolhida pelo jogador)
    slli t3, t3, 2        # Multiplica por 4 para acessar o endereço da célula correta (4 bytes por célula)
    add t6, t2, t3
    lw t4, 0(t6)      # Carrega o valor da célula (0, 1 ou 2)

    beq t4, x0, encontrou_linha_livre_jogador2   # Se a célula está vazia (0), pode colocar a peça
    addi t1, t1, -1       # Move para a linha acima
    bnez t1, procura_linha_livre_jogador2   # Continua subindo até achar uma célula vazia
    j fim_atualizar_jogador2  # Se não encontrar uma célula livre, termina (o jogo deve verificar essa condição)

encontrou_linha_livre_jogador2:
    li t4, 2              # Coloca a peça do jogador 2 (2 representa o jogador 2)
    sw t4, 0(t6)      # Atualiza a célula com o valor 2

fim_atualizar_jogador2:
    jr ra                 # Retorna ao chamador
    
verificar_vitoria:
    # Verifica se há 4 em linha
    # Implementação simplificada
    li t0, 0  # Supondo que ninguém venceu
    jr ra

    
sair:
    li a7, 10                    
    ecall

.data
dash: .asciz "- "
jogador1_peca: .asciz "#"
jogador2_peca: .asciz "& "